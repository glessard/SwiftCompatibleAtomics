//
//  PrimitiveAtomicIntegerConformances.swift
//
//  Licensed under Apache License v2.0
//

import CAtomicPrimitives
% IntegerTypes = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']
% for Type in IntegerTypes:
%{
  rmwOperations = [
    ('WrappingDecrement', 'Subtract',  'by'),
    ('BitwiseAnd',        'BitwiseAnd', 'with'),
    ('BitwiseOr',         'BitwiseOr',  'with'),
    ('BitwiseXor',        'BitwiseXor', 'with'),
  ]
}%

extension CAtomicPrimitive${Type}: PrimitiveAtomicInteger
{
#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
  ${inlinable}
  public static func atomicLoadThenWrappingIncrement(by operand: CAtomicPrimitive${Type}, at pointer: UnsafeMutablePointer<CAtomicPrimitive${Type}>, ordering: AtomicUpdateOrdering) -> CAtomicPrimitive${Type}
  {
    return CAtomicPrimitivesAdd(pointer, operand, ordering._rawValue)
  }
% for (sname, pname, label) in rmwOperations:

  ${inlinable}
  public static func atomicLoadThen${sname}(${label} operand: CAtomicPrimitive${Type}, at pointer: UnsafeMutablePointer<CAtomicPrimitive${Type}>, ordering: AtomicUpdateOrdering) -> CAtomicPrimitive${Type}
  {
    return CAtomicPrimitives${pname}(pointer, operand, ordering._rawValue)
  }
% end # rmwOperations
${end}
% end # inlinable
}
% end # for
