//
//  AtomicPointers.swift
//
//  Licensed under Apache License v2.0
//

import CAtomicsPrimitives
% for PointerType in ['UnsafePointer', 'UnsafeRawPointer', 'UnsafeMutablePointer', 'UnsafeMutableRawPointer']:
% Mutable = 'Mutable' if ('Mutable' in PointerType or PointerType == 'Unmanaged') else ''
% Raw = 'Raw' if ('Raw' in PointerType) else ''
% binding = '.assumingMemoryBound(to: Pointee.self)' if (Raw == '' and PointerType != 'Unmanaged') else ''

extension ${PointerType}: AtomicProtocol
{
  public typealias AtomicStorage = AtomicOptional${Mutable}RawPointer

#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
  ${inlinable}
  public static func prepareAtomicStorage(for value: ${PointerType}) -> AtomicOptional${Mutable}RawPointer
  {
    return encodeAtomicStorage(for: value)
  }

  ${inlinable}
  public static func disposeAtomicStorage(_ storage: inout AtomicOptional${Mutable}RawPointer) -> ${PointerType}
  {
    return decodeAtomicStorage(storage)
  }

  ${inlinable}
  public static func encodeAtomicStorage(for value: ${PointerType}) -> AtomicOptional${Mutable}RawPointer
  {
    return AtomicOptional${Mutable}RawPointer(value)
  }

  ${inlinable}
  public static func decodeAtomicStorage(_ storage: AtomicOptional${Mutable}RawPointer) -> ${PointerType}
  {
    return storage.decode()!${binding}
  }
${end}
% end # inlinable
}
% end # for PointerType

extension Unmanaged: AtomicProtocol
{
  public typealias AtomicStorage = AtomicOptionalMutableRawPointer

#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
  ${inlinable}
  public static func prepareAtomicStorage(for value: Unmanaged) -> AtomicOptionalMutableRawPointer
  {
    return encodeAtomicStorage(for: value)
  }

  ${inlinable}
  public static func disposeAtomicStorage(_ storage: inout AtomicOptionalMutableRawPointer) -> Unmanaged
  {
    return decodeAtomicStorage(storage)
  }

  ${inlinable}
  public static func encodeAtomicStorage(for value: Unmanaged) -> AtomicOptionalMutableRawPointer
  {
    return AtomicOptionalMutableRawPointer(value.toOpaque())
  }

  ${inlinable}
  public static func decodeAtomicStorage(_ storage: AtomicOptionalMutableRawPointer) -> Unmanaged
  {
    return Unmanaged.fromOpaque(storage.decode()!)
  }
${end}
% end # inlinable
}
