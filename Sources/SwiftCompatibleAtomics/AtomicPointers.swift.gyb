//
//  AtomicPointers.swift
//
//  Licensed under Apache License v2.0
//

import CAtomicPrimitives
% for PointerType in ['UnsafePointer', 'UnsafeRawPointer', 'UnsafeMutablePointer', 'UnsafeMutableRawPointer']:
% Mutable = 'Mutable' if ('Mutable' in PointerType or PointerType == 'Unmanaged') else ''
% Raw = 'Raw' if ('Raw' in PointerType) else ''
% binding = '.assumingMemoryBound(to: Pointee.self)' if (Raw == '' and PointerType != 'Unmanaged') else ''

extension ${PointerType}: AtomicValue
{
  public typealias AtomicStorage = CAtomicPrimitive${Mutable}RawPointer

#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
  ${inlinable}
  public static func prepareAtomicStorage(for value: ${PointerType}) -> CAtomicPrimitive${Mutable}RawPointer
  {
    return encodeAtomicStorage(for: value)
  }

  ${inlinable}
  public static func disposeAtomicStorage(_ storage: inout CAtomicPrimitive${Mutable}RawPointer) -> ${PointerType}
  {
    return decodeAtomicStorage(storage)
  }

  ${inlinable}
  public static func encodeAtomicStorage(for value: ${PointerType}) -> CAtomicPrimitive${Mutable}RawPointer
  {
    return CAtomicPrimitive${Mutable}RawPointer(encoding: value)
  }

  ${inlinable}
  public static func decodeAtomicStorage(_ storage: CAtomicPrimitive${Mutable}RawPointer) -> ${PointerType}
  {
    return storage.decode()!${binding}
  }
${end}
% end # inlinable
}
% end # for PointerType

extension Unmanaged: AtomicValue
{
  public typealias AtomicStorage = CAtomicPrimitiveMutableRawPointer

#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
  ${inlinable}
  public static func prepareAtomicStorage(for value: Unmanaged) -> CAtomicPrimitiveMutableRawPointer
  {
    return encodeAtomicStorage(for: value)
  }

  ${inlinable}
  public static func disposeAtomicStorage(_ storage: inout CAtomicPrimitiveMutableRawPointer) -> Unmanaged
  {
    return decodeAtomicStorage(storage)
  }

  ${inlinable}
  public static func encodeAtomicStorage(for value: Unmanaged) -> CAtomicPrimitiveMutableRawPointer
  {
    return CAtomicPrimitiveMutableRawPointer(encoding: value.toOpaque())
  }

  ${inlinable}
  public static func decodeAtomicStorage(_ storage: CAtomicPrimitiveMutableRawPointer) -> Unmanaged
  {
    return Unmanaged.fromOpaque(storage.decode()!)
  }
${end}
% end # inlinable
}
