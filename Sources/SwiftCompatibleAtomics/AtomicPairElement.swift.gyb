//
//  AtomicPairElement.swift
//
//  Licensed under Apache License v2.0
//

public protocol AtomicPairElement
{
  init(decoding: Int)
  func encode() -> Int
}

#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
extension Bool: AtomicPairElement
{
  ${inlinable} public init(decoding bits: Int) { self = (bits != 0) }
  ${inlinable} public func encode() -> Int { return self ? 1 : 0 }
}

% for int in ['Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32']:
extension ${int}: AtomicPairElement
{
  ${inlinable} public init(decoding bits: Int) { self = ${int}(truncatingIfNeeded: bits) }
  ${inlinable} public func encode() -> Int { return Int(self) }
}

% end # for int
extension Int: AtomicPairElement
{
  ${inlinable} public init(decoding bits: Int) { self = bits }
  ${inlinable} public func encode() -> Int { return self }
}

% for type in ['UInt', 'UnsafePointer', 'UnsafeMutablePointer', 'UnsafeRawPointer', 'UnsafeMutableRawPointer']:
% bang = '' if type is 'UInt' else '!'
extension ${type}: AtomicPairElement
{
  ${inlinable} public init(decoding bits: Int) { self = ${type}(bitPattern: bits)${bang} }
  ${inlinable} public func encode() -> Int { return Int(bitPattern: self) }
}

% end # for pointer
extension Unmanaged: AtomicPairElement
{
  ${inlinable} public init(decoding bits: Int) { self = Unmanaged.fromOpaque(UnsafeRawPointer(bitPattern: bits)!) }
  ${inlinable} public func encode() -> Int { return Int(bitPattern: self.toOpaque()) }
}

extension Optional: AtomicPairElement where Wrapped: AtomicPairElement & AtomicValue, Wrapped.AtomicStorage: PrimitiveAtomicOptional
{
  ${inlinable} public init(decoding bits: Int) { self = (bits == 0) ? nil : Wrapped(decoding: bits) }
  ${inlinable} public func encode() -> Int { return self?.encode() ?? 0 }
}

extension AtomicPairElement where Self: RawRepresentable, Self.RawValue: AtomicPairElement
{
  ${inlinable} public init(decoding bits: Int) { self = Self(rawValue: RawValue(decoding: bits))! }
  ${inlinable} public func encode() -> Int { return self.rawValue.encode() }
}
${end}
% end # inlinable
