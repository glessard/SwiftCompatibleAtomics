//
//  AtomicIntegers.swift
//
//  Licensed under Apache License v2.0
//

import CAtomicPrimitives
% for Type in ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']:

extension ${Type}: AtomicInteger
{
  public typealias AtomicStorage = CAtomicPrimitive${Type}

#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% end = '#else' if inlinable == '@inlinable' else '#endif'
  ${inlinable}
  public static func prepareAtomicStorage(for value: ${Type}) -> CAtomicPrimitive${Type}
  {
    return encodeAtomicStorage(for: value)
  }

  ${inlinable}
  public static func disposeAtomicStorage(_ storage: inout CAtomicPrimitive${Type}) -> ${Type}
  {
    return decodeAtomicStorage(storage)
  }

  ${inlinable}
  public static func encodeAtomicStorage(for value: ${Type}) -> CAtomicPrimitive${Type}
  {
    return CAtomicPrimitive${Type}(encoding: value)
  }

  ${inlinable}
  public static func decodeAtomicStorage(_ storage: CAtomicPrimitive${Type}) -> ${Type}
  {
    return storage.decode()
  }
${end}
% end # inlinable
}
% end # for
