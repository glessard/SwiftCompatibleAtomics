//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2020 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomicPrimitives
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    let r1 = ${i}(0)
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()

    var i = CAtomicPrimitive${i}(encoding: r1)
    XCTAssertEqual(r1, i.decode())
    XCTAssertEqual(CAtomicPrimitivesIsLockFree(&i), true)

    CAtomicPrimitivesStore(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    var j = CAtomicPrimitivesLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicPrimitivesExchange(&i, CAtomicPrimitive${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    j = CAtomicPrimitivesAdd(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 &+ r2, i.decode())

    j = CAtomicPrimitivesSubtract(&i, CAtomicPrimitive${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1 &+ r2, j.decode())
    XCTAssertEqual(r1, i.decode())

    CAtomicPrimitivesStore(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    j = CAtomicPrimitivesBitwiseOr(&i, CAtomicPrimitive${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 | r2, i.decode())

    CAtomicPrimitivesStore(&i, CAtomicPrimitive${i}(encoding: r2), .relaxed)
    j = CAtomicPrimitivesBitwiseXor(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 ^ r2, i.decode())

    CAtomicPrimitivesStore(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    j = CAtomicPrimitivesBitwiseAnd(&i, CAtomicPrimitive${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 & r2, i.decode())

    j = CAtomicPrimitive${i}(encoding: r1)
    CAtomicPrimitivesStore(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    XCTAssertTrue(CAtomicPrimitivesCompareAndExchangeStrong(&i, &j, CAtomicPrimitive${i}(encoding: r2), .relaxed, .relaxed))
    XCTAssertEqual(r2, i.decode())

    j = CAtomicPrimitive${i}(encoding: r2)
    CAtomicPrimitivesStore(&i, CAtomicPrimitive${i}(encoding: r1), .relaxed)
    while(!CAtomicPrimitivesCompareAndExchangeWeak(&i, &j, CAtomicPrimitive${i}(encoding: r3), .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r3, i.decode())

  }

% end
% pointers = ['CAtomicPrimitiveRawPointer', 'CAtomicPrimitiveMutableRawPointer']
% for type in pointers:
  public func test${type}()
  {
% mutptr = 'Mutable' if 'Mutable' in type else ''
% prefix = 'Unsafe' + mutptr + 'Raw'
    let r0 = ${prefix}Pointer(bitPattern: 0)
    let r1 = ${prefix}Pointer(bitPattern: UInt.randomPositive())
    let r2 = ${prefix}Pointer(bitPattern: UInt.randomPositive())
    let r3 = ${prefix}Pointer(bitPattern: UInt.randomPositive())

    var i = ${type}(encoding: r0)
    XCTAssertEqual(r0, i.decode())
    XCTAssertEqual(CAtomicPrimitivesIsLockFree(&i), true)

    CAtomicPrimitivesStore(&i, ${type}(encoding: r1), .relaxed)
    var j = CAtomicPrimitivesLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicPrimitivesExchange(&i, ${type}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    XCTAssertEqual(CAtomicPrimitivesCompareAndExchangeStrong(&i, &j, ${type}(encoding: r2), .relaxed, .relaxed), false)
    XCTAssertEqual(r2, j.decode())

    XCTAssertEqual(CAtomicPrimitivesCompareAndExchangeStrong(&i, &j, ${type}(encoding: r3), .relaxed, .relaxed), true)
    XCTAssertEqual(r2, j.decode())

    while !CAtomicPrimitivesCompareAndExchangeWeak(&i, &j, ${type}(encoding: r1), .relaxed, .relaxed) {}
    XCTAssertEqual(r3, j.decode())
    XCTAssertEqual(r1, i.decode())
  }

% end
  public func testFence()
  {
    CAtomicPrimitivesThreadFence(.release)
    CAtomicPrimitivesThreadFence(.acquire)
  }
}
