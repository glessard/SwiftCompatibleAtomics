//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2020 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomicsPrimitives
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    let r1 = ${i}(0)
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()

    var i = Atomic${i}(encoding: r1)
    XCTAssertEqual(r1, i.decode())
    XCTAssertEqual(CAtomicsPrimitivesIsLockFree(&i), true)

    CAtomicsPrimitivesStore(&i, Atomic${i}(encoding: r1), .relaxed)
    var j = CAtomicsPrimitivesLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicsPrimitivesExchange(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    j = CAtomicsPrimitivesAdd(&i, Atomic${i}(encoding: r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 &+ r2, i.decode())

    j = CAtomicsPrimitivesSubtract(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1 &+ r2, j.decode())
    XCTAssertEqual(r1, i.decode())

    CAtomicsPrimitivesStore(&i, Atomic${i}(encoding: r1), .relaxed)
    j = CAtomicsPrimitivesBitwiseOr(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 | r2, i.decode())

    CAtomicsPrimitivesStore(&i, Atomic${i}(encoding: r2), .relaxed)
    j = CAtomicsPrimitivesBitwiseXor(&i, Atomic${i}(encoding: r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 ^ r2, i.decode())

    CAtomicsPrimitivesStore(&i, Atomic${i}(encoding: r1), .relaxed)
    j = CAtomicsPrimitivesBitwiseAnd(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 & r2, i.decode())

    j = Atomic${i}(encoding: r1)
    CAtomicsPrimitivesStore(&i, Atomic${i}(encoding: r1), .relaxed)
    XCTAssertTrue(CAtomicsPrimitivesCompareAndExchangeStrong(&i, &j, Atomic${i}(encoding: r2), .relaxed, .relaxed))
    XCTAssertEqual(r2, i.decode())

    j = Atomic${i}(encoding: r2)
    CAtomicsPrimitivesStore(&i, Atomic${i}(encoding: r1), .relaxed)
    while(!CAtomicsPrimitivesCompareAndExchangeWeak(&i, &j, Atomic${i}(encoding: r3), .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r3, i.decode())

  }

% end
% pointers = ['AtomicRawPointer', 'AtomicMutableRawPointer']
% for type in pointers:
  public func test${type}()
  {
% mutptr = 'Mutable' if 'Mutable' in type else ''
% prefix = 'Unsafe' + mutptr + 'Raw'
    let r0 = ${prefix}Pointer(bitPattern: 0)
    let r1 = ${prefix}Pointer(bitPattern: UInt.randomPositive())
    let r2 = ${prefix}Pointer(bitPattern: UInt.randomPositive())
    let r3 = ${prefix}Pointer(bitPattern: UInt.randomPositive())

    var i = ${type}(encoding: r0)
    XCTAssertEqual(r0, i.decode())
    XCTAssertEqual(CAtomicsPrimitivesIsLockFree(&i), true)

    CAtomicsPrimitivesStore(&i, ${type}(encoding: r1), .relaxed)
    var j = CAtomicsPrimitivesLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicsPrimitivesExchange(&i, ${type}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    XCTAssertEqual(CAtomicsPrimitivesCompareAndExchangeStrong(&i, &j, ${type}(encoding: r2), .relaxed, .relaxed), false)
    XCTAssertEqual(r2, j.decode())

    XCTAssertEqual(CAtomicsPrimitivesCompareAndExchangeStrong(&i, &j, ${type}(encoding: r3), .relaxed, .relaxed), true)
    XCTAssertEqual(r2, j.decode())

    while !CAtomicsPrimitivesCompareAndExchangeWeak(&i, &j, ${type}(encoding: r1), .relaxed, .relaxed) {}
    XCTAssertEqual(r3, j.decode())
    XCTAssertEqual(r1, i.decode())
  }

% end
  public func testFence()
  {
    CAtomicsPrimitivesThreadFence(.release)
    CAtomicsPrimitivesThreadFence(.acquire)
  }
}
