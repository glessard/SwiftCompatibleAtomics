//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2020 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomicsPrimitives
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    let r1 = ${i}(0)
#if swift(>=4.0)
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()
#else
    let r2 = ${i}(UInt.randomPositive())
    let r3 = ${i}(UInt.randomPositive())
#endif

    var i = Atomic${i}(r1)
    XCTAssertEqual(r1, i.decode())
    XCTAssertEqual(CAtomicsIsLockFree(&i), true)

    CAtomicsStore(&i, Atomic${i}(r1), .relaxed)
    var j = CAtomicsLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicsExchange(&i, Atomic${i}(r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    j = CAtomicsAdd(&i, Atomic${i}(r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 &+ r2, i.decode())

    j = CAtomicsSubtract(&i, Atomic${i}(r2), .relaxed)
    XCTAssertEqual(r1 &+ r2, j.decode())
    XCTAssertEqual(r1, i.decode())

    CAtomicsStore(&i, Atomic${i}(r1), .relaxed)
    j = CAtomicsBitwiseOr(&i, Atomic${i}(r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 | r2, i.decode())

    CAtomicsStore(&i, Atomic${i}(r2), .relaxed)
    j = CAtomicsBitwiseXor(&i, Atomic${i}(r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 ^ r2, i.decode())

    CAtomicsStore(&i, Atomic${i}(r1), .relaxed)
    j = CAtomicsBitwiseAnd(&i, Atomic${i}(r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 & r2, i.decode())

    j = Atomic${i}(r1)
    CAtomicsStore(&i, Atomic${i}(r1), .relaxed)
    XCTAssertTrue(CAtomicsCompareAndExchangeStrong(&i, &j, Atomic${i}(r2), .relaxed, .relaxed))
    XCTAssertEqual(r2, i.decode())

    j = Atomic${i}(r2)
    CAtomicsStore(&i, Atomic${i}(r1), .relaxed)
    while(!CAtomicsCompareAndExchangeWeak(&i, &j, Atomic${i}(r3), .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r3, i.decode())

  }

% end
% pointers = ['AtomicOptionalRawPointer', 'AtomicRawPointer', 'AtomicMutableRawPointer', 'AtomicOptionalMutableRawPointer', 'AtomicOpaquePointer', 'AtomicOptionalOpaquePointer']
% for type in pointers:
  public func test${type}()
  {
% mutptr = 'Mutable' if 'Mutable' in type else ''
% prefix = 'Unsafe' + mutptr + 'Raw'
% native = prefix if 'RawPointer' in type else 'Opaque'
% bang = '' if ('Optional' in type) else '!'
    let r0 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r1 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r2 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r3 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}

    var p = ${type}(r3)
    XCTAssertEqual(CAtomicsLoad(&p, .relaxed), r3)
    XCTAssertEqual(CAtomicsIsLockFree(&p), true)

    CAtomicsInitialize(&p, r0)
    XCTAssertEqual(r0, CAtomicsLoad(&p, .relaxed))

    CAtomicsStore(&p, r1, .relaxed)
    XCTAssertEqual(r1, CAtomicsLoad(&p, .relaxed))

    var j = CAtomicsExchange(&p, r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, CAtomicsLoad(&p, .relaxed))

    j = r2
    XCTAssertTrue(CAtomicsCompareAndExchangeStrong(&p, &j, r3, .relaxed, .relaxed))
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))

    XCTAssertFalse(CAtomicsCompareAndExchangeStrong(&p, &j, r2, .relaxed, .relaxed))
    j = r3
    XCTAssertTrue(CAtomicsCompareAndExchangeStrong(&p, &j, r2, .relaxed, .relaxed))
    j = CAtomicsLoad(&p, .relaxed)
    XCTAssertTrue(CAtomicsCompareAndExchangeStrong(&p, &j, r1, .relaxed, .relaxed))
    while !CAtomicsCompareAndExchangeWeak(&p, &j, r3, .relaxed, .relaxed) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))
  }

% end
  public func testFence()
  {
    CAtomicsThreadFence(.release)
    CAtomicsThreadFence(.acquire)
  }
}
