//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2020 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomicsPrimitives
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    let r1 = ${i}(0)
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()

    var i = Atomic${i}(encoding: r1)
    XCTAssertEqual(r1, i.decode())
    XCTAssertEqual(CAtomicsIsLockFree(&i), true)

    CAtomicsStore(&i, Atomic${i}(encoding: r1), .relaxed)
    var j = CAtomicsLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicsExchange(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    j = CAtomicsAdd(&i, Atomic${i}(encoding: r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 &+ r2, i.decode())

    j = CAtomicsSubtract(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1 &+ r2, j.decode())
    XCTAssertEqual(r1, i.decode())

    CAtomicsStore(&i, Atomic${i}(encoding: r1), .relaxed)
    j = CAtomicsBitwiseOr(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 | r2, i.decode())

    CAtomicsStore(&i, Atomic${i}(encoding: r2), .relaxed)
    j = CAtomicsBitwiseXor(&i, Atomic${i}(encoding: r1), .relaxed)
    XCTAssertEqual(r2, j.decode())
    XCTAssertEqual(r1 ^ r2, i.decode())

    CAtomicsStore(&i, Atomic${i}(encoding: r1), .relaxed)
    j = CAtomicsBitwiseAnd(&i, Atomic${i}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r1 & r2, i.decode())

    j = Atomic${i}(encoding: r1)
    CAtomicsStore(&i, Atomic${i}(encoding: r1), .relaxed)
    XCTAssertTrue(CAtomicsCompareAndExchangeStrong(&i, &j, Atomic${i}(encoding: r2), .relaxed, .relaxed))
    XCTAssertEqual(r2, i.decode())

    j = Atomic${i}(encoding: r2)
    CAtomicsStore(&i, Atomic${i}(encoding: r1), .relaxed)
    while(!CAtomicsCompareAndExchangeWeak(&i, &j, Atomic${i}(encoding: r3), .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r3, i.decode())

  }

% end
% pointers = ['AtomicRawPointer', 'AtomicMutableRawPointer']
% for type in pointers:
  public func test${type}()
  {
% mutptr = 'Mutable' if 'Mutable' in type else ''
% prefix = 'Unsafe' + mutptr + 'Raw'
    let r0 = ${prefix}Pointer(bitPattern: 0)
    let r1 = ${prefix}Pointer(bitPattern: UInt.randomPositive())
    let r2 = ${prefix}Pointer(bitPattern: UInt.randomPositive())
    let r3 = ${prefix}Pointer(bitPattern: UInt.randomPositive())

    var i = ${type}(encoding: r0)
    XCTAssertEqual(r0, i.decode())
    XCTAssertEqual(CAtomicsIsLockFree(&i), true)

    CAtomicsStore(&i, ${type}(encoding: r1), .relaxed)
    var j = CAtomicsLoad(&i, .relaxed)
    XCTAssertEqual(i.decode(), j.decode())

    j = CAtomicsExchange(&i, ${type}(encoding: r2), .relaxed)
    XCTAssertEqual(r1, j.decode())
    XCTAssertEqual(r2, i.decode())

    XCTAssertEqual(CAtomicsCompareAndExchangeStrong(&i, &j, ${type}(encoding: r2), .relaxed, .relaxed), false)
    XCTAssertEqual(r2, j.decode())

    XCTAssertEqual(CAtomicsCompareAndExchangeStrong(&i, &j, ${type}(encoding: r3), .relaxed, .relaxed), true)
    XCTAssertEqual(r2, j.decode())

    while !CAtomicsCompareAndExchangeWeak(&i, &j, ${type}(encoding: r1), .relaxed, .relaxed) {}
    XCTAssertEqual(r3, j.decode())
    XCTAssertEqual(r1, i.decode())
  }

% end
  public func testFence()
  {
    CAtomicsThreadFence(.release)
    CAtomicsThreadFence(.acquire)
  }
}

extension DoubleWidth: Equatable
{
  static public func ==(lhs: DoubleWidth, rhs: DoubleWidth) -> Bool
  {
    return (lhs.value1 == rhs.value1) && (lhs.value2 == rhs.value2)
  }
}

extension CAtomicsBasicTests
{
  public func testDoubleWidth()
  {
    let r0 = DoubleWidth(0, .randomPositive())
    var r1 = DoubleWidth(.randomPositive(), 0)

    XCTAssertNotEqual(r0, r1)

    r1 = r0
    XCTAssertEqual(r0, r1)

    r1.value2 += 1
    XCTAssertNotEqual(r0, r1)
    XCTAssertEqual(r0.value1, r1.value1)
    XCTAssertEqual(r0.value2 &+ 1, r1.value2)

    r1.value1 = .randomPositive()
    XCTAssertNotEqual(r0.value1, r1.value1)
    XCTAssertEqual(r0.value2 &+ 1, r1.value2)
  }
}
